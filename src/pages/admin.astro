---
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
---

<BaseLayout title="Admin - Create New Post" description="Create and manage blog posts for Lumen">
  <Header />

  <main class="min-h-screen bg-white dark:bg-gray-900">
    <!-- Hero Section -->
    <section class="gradient-bg-hero py-16 lg:py-24 relative overflow-hidden">
      <div class="absolute top-10 left-10 w-72 h-72 bg-gradient-to-r from-indigo-400 to-purple-400 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-float"></div>
      <div class="absolute bottom-10 right-10 w-72 h-72 bg-gradient-to-r from-cyan-400 to-blue-400 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-float" style="animation-delay: 2s;"></div>

      <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 relative">
        <header class="text-center mb-12">
          <div class="inline-flex items-center px-4 py-2 rounded-full bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border border-white/20 dark:border-gray-700/20 text-sm font-medium text-indigo-600 dark:text-indigo-400 mb-8">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
            </svg>
            Content Creation
          </div>
          <h1 class="text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-6">
            Create New <span class="gradient-text">Blog Post</span>
          </h1>
          <p class="text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto leading-relaxed">
            Share your insights and inspire others with your knowledge
          </p>

          <!-- Admin Tools Navigation -->
          <div class="flex flex-wrap justify-center gap-4 mt-8">
            <a href="/admin" class="btn-primary">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
              </svg>
              Create Post
            </a>
            <a href="/admin/manage" class="btn-secondary">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
              </svg>
              Manage Posts
            </a>
          </div>
        </header>
      </div>
    </section>

    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
      <div class="card-elevated p-8 lg:p-12">
            
        <form id="blogForm" class="space-y-8">
          <!-- Title -->
          <div class="space-y-2">
            <label for="title" class="block text-sm font-semibold text-gray-900 dark:text-white">
              Post Title *
            </label>
            <input
              type="text"
              id="title"
              name="title"
              required
              class="input w-full text-lg"
              placeholder="Enter an inspiring title for your post"
            >
          </div>

          <!-- Description -->
          <div class="space-y-2">
            <label for="description" class="block text-sm font-semibold text-gray-900 dark:text-white">
              Description *
            </label>
            <textarea
              id="description"
              name="description"
              required
              rows="3"
              class="input w-full resize-none"
              placeholder="A compelling description that will appear in previews and search results"
            ></textarea>
          </div>

          <!-- Author and Tags Row -->
          <div class="grid md:grid-cols-2 gap-6">
            <!-- Author -->
            <div class="space-y-2">
              <label for="author" class="block text-sm font-semibold text-gray-900 dark:text-white">
                Author
              </label>
              <input
                type="text"
                id="author"
                name="author"
                value="Navid Jalilian"
                class="input w-full"
              >
            </div>

            <!-- Tags -->
            <div class="space-y-2">
              <label for="tags" class="block text-sm font-semibold text-gray-900 dark:text-white">
                Tags
              </label>
              <input
                type="text"
                id="tags"
                name="tags"
                class="input w-full"
                placeholder="personal-growth, success, productivity"
              >
              <p class="text-xs text-gray-500 dark:text-gray-400">Comma separated. Leave empty for auto-generation</p>
            </div>
          </div>

          <!-- Featured Toggle -->
          <div class="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-800 rounded-xl">
            <div>
              <label for="featured" class="block text-sm font-semibold text-gray-900 dark:text-white">
                Featured Post
              </label>
              <p class="text-xs text-gray-500 dark:text-gray-400">Highlight this post on the homepage</p>
            </div>
            <label class="relative inline-flex items-center cursor-pointer">
              <input type="checkbox" id="featured" name="featured" class="sr-only peer">
              <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-indigo-300 dark:peer-focus:ring-indigo-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-indigo-600"></div>
            </label>
          </div>

          <!-- Content -->
          <div class="space-y-2">
            <label for="content" class="block text-sm font-semibold text-gray-900 dark:text-white">
              Content *
            </label>
            <div class="relative">
              <textarea
                id="content"
                name="content"
                required
                rows="20"
                class="input w-full font-mono text-sm resize-y min-h-[400px]"
                placeholder="# Your Amazing Blog Post

Write your content here using Markdown formatting...

## Key Points
- Point 1
- Point 2
- Point 3

Remember to share your unique insights and experiences!"
              ></textarea>
              <div class="absolute top-2 right-2 text-xs text-gray-400 dark:text-gray-500 bg-white dark:bg-gray-800 px-2 py-1 rounded">
                Markdown supported
              </div>
            </div>
            <div class="flex items-center gap-4 text-xs text-gray-500 dark:text-gray-400">
              <span>ðŸ’¡ Tip: Use ## for headings, **bold**, *italic*, and - for lists</span>
            </div>
          </div>

          <!-- Action Buttons -->
          <div class="flex flex-col sm:flex-row gap-4 pt-6 border-t border-gray-200 dark:border-gray-700">
            <button
              type="submit"
              class="btn-primary flex-1 sm:flex-none"
            >
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
              </svg>
              Generate Markdown File
            </button>
            <button
              type="button"
              id="previewBtn"
              class="btn-secondary flex-1 sm:flex-none"
            >
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
              </svg>
              Preview
            </button>
          </div>
        </form>

        <!-- Output Section -->
        <div id="output" class="mt-12 hidden">
          <div class="card p-6 lg:p-8">
            <div class="flex items-center justify-between mb-6">
              <h2 class="text-2xl font-bold text-gray-900 dark:text-white">
                âœ¨ Generated Markdown File
              </h2>
              <button
                id="copyBtn"
                class="btn-primary"
              >
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                </svg>
                Copy to Clipboard
              </button>
            </div>

            <div class="space-y-4">
              <div class="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                <span>Filename: <code id="filename" class="bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded text-xs"></code></span>
              </div>

              <div class="bg-gray-50 dark:bg-gray-800 rounded-xl p-4">
                <pre id="markdownOutput" class="text-sm overflow-x-auto whitespace-pre-wrap text-gray-800 dark:text-gray-200"></pre>
              </div>
            </div>

            <div class="mt-6 p-6 bg-gradient-to-r from-indigo-50 to-purple-50 dark:from-indigo-900/20 dark:to-purple-900/20 rounded-xl border border-indigo-200 dark:border-indigo-800">
              <h3 class="font-semibold text-indigo-900 dark:text-indigo-100 mb-3 flex items-center">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                Next Steps
              </h3>
              <ol class="text-sm text-indigo-800 dark:text-indigo-200 space-y-2">
                <li class="flex items-start">
                  <span class="bg-indigo-600 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs mr-3 mt-0.5">1</span>
                  Copy the generated markdown content above
                </li>
                <li class="flex items-start">
                  <span class="bg-indigo-600 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs mr-3 mt-0.5">2</span>
                  Create a new file: <code class="bg-indigo-100 dark:bg-indigo-800 px-2 py-1 rounded text-xs">src/content/blog/[filename].md</code>
                </li>
                <li class="flex items-start">
                  <span class="bg-indigo-600 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs mr-3 mt-0.5">3</span>
                  Paste the content and save the file
                </li>
                <li class="flex items-start">
                  <span class="bg-indigo-600 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs mr-3 mt-0.5">4</span>
                  Commit and push to deploy your new post
                </li>
              </ol>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <Footer />
</BaseLayout>

<script is:inline>
        function slugify(text) {
            return text
                .toLowerCase()
                .replace(/[^\w\s-]/g, '')
                .replace(/[\s_-]+/g, '-')
                .replace(/^-+|-+$/g, '');
        }

        function generateMarkdown(formData) {
            const title = formData.get('title') || '';
            const description = formData.get('description') || '';
            const author = formData.get('author') || 'Navid Jalilian';
            const tags = formData.get('tags') || '';
            const featured = formData.get('featured') === 'on';
            const content = formData.get('content') || '';
            
            const slug = slugify(title);
            const date = new Date().toISOString().split('T')[0];
            
            // Auto-generate tags if empty
            let tagArray = [];
            if (tags.trim()) {
                tagArray = tags.split(',').map(tag => tag.trim());
            } else {
                // Simple auto-tagging based on content
                const words = (title + ' ' + description + ' ' + content).toLowerCase();
                const commonTags = [
                    'personal-growth', 'success', 'productivity', 'entrepreneurship',
                    'leadership', 'mindset', 'business', 'motivation', 'self-improvement'
                ];
                tagArray = commonTags.filter(tag => 
                    words.includes(tag.replace('-', ' ')) || 
                    words.includes(tag.replace('-', ''))
                ).slice(0, 3);
                
                if (tagArray.length === 0) {
                    tagArray = ['personal-growth'];
                }
            }

            const frontmatter = `---
title: "${title}"
description: "${description}"
pubDate: ${date}
author: "${author}"
tags: [${tagArray.map(tag => `"${tag}"`).join(', ')}]
heroImage: ""
featured: ${featured}
draft: false
---

${content}`;

            return { frontmatter, slug };
        }

        const blogForm = document.getElementById('blogForm');
        if (blogForm) {
            blogForm.addEventListener('submit', function(e) {
                e.preventDefault();

                const formData = new FormData(this);
                const { frontmatter, slug } = generateMarkdown(formData);

                const filenameEl = document.getElementById('filename');
                const outputEl = document.getElementById('markdownOutput');
                const containerEl = document.getElementById('output');

                if (filenameEl) filenameEl.textContent = `${slug}.md`;
                if (outputEl) outputEl.textContent = frontmatter;
                if (containerEl) {
                    containerEl.classList.remove('hidden');
                    containerEl.scrollIntoView({ behavior: 'smooth' });
                }
            });
        }

        const copyBtn = document.getElementById('copyBtn');
        if (copyBtn) {
            copyBtn.addEventListener('click', function() {
                const outputEl = document.getElementById('markdownOutput');
                const content = outputEl?.textContent || '';

                if (content) {
                    navigator.clipboard.writeText(content).then(() => {
                        this.innerHTML = `
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                            </svg>
                            Copied!
                        `;

                        setTimeout(() => {
                            this.innerHTML = `
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                                </svg>
                                Copy to Clipboard
                            `;
                        }, 2000);
                    });
                }
            });
        }

        const previewBtn = document.getElementById('previewBtn');
        if (previewBtn) {
            previewBtn.addEventListener('click', function() {
                const blogFormEl = document.getElementById('blogForm');
                if (blogFormEl) {
                    const formData = new FormData(blogFormEl);
                    const title = formData.get('title') || 'Untitled';
                    const content = formData.get('content') || '';

                    // Simple preview in a new window
                    const previewWindow = window.open('', '_blank', 'width=800,height=600');
                    if (previewWindow) {
                        previewWindow.document.write(`
                            <html>
                                <head>
                                    <title>Preview: ${title}</title>
                                    <style>
                                        body { font-family: system-ui, sans-serif; max-width: 800px; margin: 0 auto; padding: 2rem; line-height: 1.6; }
                                        h1, h2, h3 { color: #1f2937; }
                                        pre { background: #f3f4f6; padding: 1rem; border-radius: 0.5rem; overflow-x: auto; }
                                        code { background: #f3f4f6; padding: 0.25rem 0.5rem; border-radius: 0.25rem; }
                                    </style>
                                </head>
                                <body>
                                    <h1>${title}</h1>
                                    <div style="white-space: pre-wrap;">${content}</div>
                                </body>
                            </html>
                        `);
                        previewWindow.document.close();
                    }
                }
            });
        }
    </script>
