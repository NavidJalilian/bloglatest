---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';

// Get all English blog posts
const allPosts = await getCollection('blog', ({ id, data }) => {
  return !data.draft && data.lang === 'en' && id.startsWith('en/');
});

// Sort posts by publication date (newest first)
const sortedPosts = allPosts.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Get unique tags for filtering
const allTags = [...new Set(allPosts.flatMap(post => post.data.tags))].sort();

// Pagination (you can implement this later)
const postsPerPage = 10;
const totalPages = Math.ceil(sortedPosts.length / postsPerPage);
---

<BaseLayout title="Articles - TechCraft" description="Explore cutting-edge web development insights, programming tutorials, and technology trends from industry experts.">
  <Header />

  <main class="min-h-screen bg-white dark:bg-gray-900">
    <!-- Page Header -->
    <section class="gradient-bg-primary py-20">
      <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        <header class="text-center mb-12">
          <div class="inline-flex items-center px-4 py-2 rounded-full bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border border-white/20 dark:border-gray-700/20 text-sm font-medium text-indigo-600 dark:text-indigo-400 mb-8">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
            </svg>
            {sortedPosts.length} Articles Published
          </div>

          <h1 class="text-5xl md:text-6xl font-bold text-gray-900 dark:text-white mb-6">
            Latest <span class="gradient-text">Articles</span>
          </h1>
          <p class="text-xl md:text-2xl text-gray-600 dark:text-gray-300 max-w-4xl mx-auto leading-relaxed">
            Discover cutting-edge insights, comprehensive tutorials, and expert analysis on web development,
            programming, and emerging technologies.
          </p>
        </header>


        <!-- Search and Filter Section -->
        <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-8 mb-12">
          <div class="grid md:grid-cols-2 gap-8">
            <!-- Search -->
            <div>
              <label for="search-input" class="block text-sm font-semibold text-gray-900 dark:text-white mb-3">
                Search Articles
              </label>
              <div class="relative">
                <input
                  type="text"
                  id="search-input"
                  placeholder="Search by title, description, or content..."
                  class="input-search"
                />
                <svg class="absolute left-3 top-3.5 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
              </div>
            </div>

            <!-- Filter Tags -->
            <div>
              <label class="block text-sm font-semibold text-gray-900 dark:text-white mb-3">
                Filter by Topics
              </label>
              <div class="flex flex-wrap gap-2">
                <button
                  class="tag-filter active px-4 py-2 rounded-xl text-sm font-semibold bg-indigo-600 text-white hover:bg-indigo-700 transition-all duration-200 shadow-md"
                  data-tag="all"
                >
                  All Articles
                </button>
                {allTags.map((tag) => (
                  <button
                    class="tag-filter px-4 py-2 rounded-xl text-sm font-semibold bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-indigo-100 dark:hover:bg-indigo-900/50 hover:text-indigo-700 dark:hover:text-indigo-300 transition-all duration-200"
                    data-tag={tag}
                  >
                    {tag}
                  </button>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Posts Grid -->
    <section class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 pb-20">
      <div id="posts-container" class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
        {sortedPosts.map((post, index) => (
          <article
            class="post-item card-elevated hover-lift group"
            data-tags={post.data.tags.join(',')}
            data-title={post.data.title.toLowerCase()}
            data-description={post.data.description.toLowerCase()}
            style={`animation-delay: ${index * 0.1}s`}
          >
            {post.data.heroImage && (
              <div class="relative overflow-hidden">
                <img
                  src={post.data.heroImage}
                  alt={post.data.title}
                  class="w-full h-56 object-cover transition-transform duration-500 group-hover:scale-105"
                />
                <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                {post.data.featured && (
                  <div class="absolute top-4 left-4">
                    <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold bg-gradient-to-r from-yellow-400 to-orange-500 text-white shadow-lg">
                      <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                      </svg>
                      Featured
                    </span>
                  </div>
                )}
              </div>
            )}

            <div class="p-8">
              <!-- Post Meta -->
              <div class="flex items-center justify-between text-sm text-gray-500 dark:text-gray-400 mb-4">
                <div class="flex items-center">
                  <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v14a2 2 0 002 2z" />
                  </svg>
                  <time datetime={post.data.pubDate.toISOString()}>
                    {post.data.pubDate.toLocaleDateString('en-US', {
                      year: 'numeric',
                      month: 'short',
                      day: 'numeric',
                    })}
                  </time>
                </div>
                <div class="flex items-center">
                  <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                  </svg>
                  <span>{post.data.author}</span>
                </div>
              </div>

              <!-- Post Title -->
              <h3 class="text-xl font-bold text-gray-900 dark:text-white mb-3 group-hover:text-indigo-600 dark:group-hover:text-indigo-400 transition-colors">
                <a href={`/blog/${post.slug.replace('en/', '')}`} class="stretched-link">
                  {post.data.title}
                </a>
              </h3>

              <!-- Post Description -->
              <p class="text-gray-600 dark:text-gray-300 mb-6 line-clamp-3 leading-relaxed">
                {post.data.description}
              </p>

              <!-- Tags -->
              {post.data.tags && post.data.tags.length > 0 && (
                <div class="flex flex-wrap gap-2 mb-6">
                  {post.data.tags.slice(0, 3).map((tag) => (
                    <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300">
                      {tag}
                    </span>
                  ))}
                  {post.data.tags.length > 3 && (
                    <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-500 dark:text-gray-400">
                      +{post.data.tags.length - 3}
                    </span>
                  )}
                </div>
              )}

              <!-- Read More Link -->
              <div class="flex items-center justify-between">
                <span class="text-sm text-gray-500 dark:text-gray-400">
                  Read article
                </span>
                <svg class="w-5 h-5 text-indigo-600 dark:text-indigo-400 group-hover:translate-x-1 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3" />
                </svg>
              </div>
            </div>
          </article>
        ))}
      </div>

    <!-- No Results Message -->
    <div id="no-results" class="hidden text-center py-12">
      <svg class="mx-auto w-16 h-16 text-gray-400 mb-4" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
      </svg>
      <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">No posts found</h3>
      <p class="text-gray-600 dark:text-gray-400">Try adjusting your search or filter criteria.</p>
    </div>

    <!-- Pagination (placeholder for future implementation) -->
    <div class="mt-12 flex justify-center">
      <nav class="flex items-center space-x-2">
        <button class="px-3 py-2 text-sm font-medium text-gray-500 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 disabled:opacity-50" disabled>
          Previous
        </button>
        <span class="px-3 py-2 text-sm font-medium text-white bg-blue-600 border border-blue-600 rounded-md">
          1
        </span>
        <button class="px-3 py-2 text-sm font-medium text-gray-500 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 disabled:opacity-50" disabled>
          Next
        </button>
      </nav>
    </div>
  </main>
  
  <Footer />
</BaseLayout>

<script>
  // Search and filter functionality
  const searchInput = document.getElementById('search-input');
  const tagFilters = document.querySelectorAll('.tag-filter');
  const postItems = document.querySelectorAll('.post-item');
  const noResults = document.getElementById('no-results');
  const postsContainer = document.getElementById('posts-container');

  let currentTag = 'all';
  let currentSearch = '';

  function filterPosts() {
    let visibleCount = 0;

    postItems.forEach(post => {
      const postTags = post.dataset.tags.split(',');
      const postTitle = post.dataset.title;
      const postDescription = post.dataset.description;

      const matchesTag = currentTag === 'all' || postTags.includes(currentTag);
      const matchesSearch = currentSearch === '' || 
        postTitle.includes(currentSearch) || 
        postDescription.includes(currentSearch) ||
        postTags.some(tag => tag.includes(currentSearch));

      if (matchesTag && matchesSearch) {
        post.style.display = 'block';
        visibleCount++;
      } else {
        post.style.display = 'none';
      }
    });

    // Show/hide no results message
    if (visibleCount === 0) {
      noResults.classList.remove('hidden');
      postsContainer.classList.add('hidden');
    } else {
      noResults.classList.add('hidden');
      postsContainer.classList.remove('hidden');
    }
  }

  // Search functionality
  searchInput?.addEventListener('input', (e) => {
    currentSearch = e.target.value.toLowerCase();
    filterPosts();
  });

  // Tag filter functionality
  tagFilters.forEach(button => {
    button.addEventListener('click', () => {
      // Update active state
      tagFilters.forEach(btn => {
        btn.classList.remove('active', 'bg-indigo-600', 'text-white', 'shadow-md');
        btn.classList.add('bg-gray-100', 'dark:bg-gray-700', 'text-gray-700', 'dark:text-gray-300');
      });
      
      button.classList.add('active', 'bg-indigo-600', 'text-white', 'shadow-md');
      button.classList.remove('bg-gray-100', 'dark:bg-gray-700', 'text-gray-700', 'dark:text-gray-300');

      currentTag = button.dataset.tag;
      filterPosts();
    });
  });
</script>

<style>
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
