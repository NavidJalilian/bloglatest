---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';

// Get all blog posts
const allPosts = await getCollection('blog', ({ data }) => {
  return !data.draft;
});

// Sort posts by publication date (newest first)
const sortedPosts = allPosts.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Get unique tags for filtering
const allTags = [...new Set(allPosts.flatMap(post => post.data.tags))].sort();

// Pagination (you can implement this later)
const postsPerPage = 10;
const totalPages = Math.ceil(sortedPosts.length / postsPerPage);
---

<BaseLayout title="Blog - DevBlog" description="Explore our latest blog posts about web development, programming, and technology.">
  <Header />
  
  <main class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Page Header -->
    <header class="text-center mb-12">
      <h1 class="text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-4">
        Blog Posts
      </h1>
      <p class="text-xl text-gray-600 dark:text-gray-300 max-w-2xl mx-auto">
        Discover insights, tutorials, and thoughts on web development, programming, and technology.
      </p>
    </header>

    <!-- Filter Tags -->
    <div class="mb-8">
      <h2 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Filter by Tags</h2>
      <div class="flex flex-wrap gap-2">
        <button 
          class="tag-filter active px-3 py-1 rounded-full text-sm font-medium bg-blue-600 text-white hover:bg-blue-700 transition-colors"
          data-tag="all"
        >
          All Posts
        </button>
        {allTags.map((tag) => (
          <button 
            class="tag-filter px-3 py-1 rounded-full text-sm font-medium bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors"
            data-tag={tag}
          >
            #{tag}
          </button>
        ))}
      </div>
    </div>

    <!-- Search -->
    <div class="mb-8">
      <div class="relative">
        <input 
          type="text" 
          id="search-input"
          placeholder="Search posts..."
          class="w-full px-4 py-3 pl-10 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-800 dark:text-white"
        />
        <svg class="absolute left-3 top-3.5 w-5 h-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
        </svg>
      </div>
    </div>

    <!-- Posts Grid -->
    <div id="posts-container" class="space-y-8">
      {sortedPosts.map((post) => (
        <article 
          class="post-item bg-white dark:bg-gray-800 rounded-lg shadow-md hover:shadow-lg transition-shadow overflow-hidden"
          data-tags={post.data.tags.join(',')}
          data-title={post.data.title.toLowerCase()}
          data-description={post.data.description.toLowerCase()}
        >
          <div class="md:flex">
            {post.data.heroImage && (
              <div class="md:w-1/3">
                <img 
                  src={post.data.heroImage} 
                  alt={post.data.title}
                  class="w-full h-48 md:h-full object-cover"
                />
              </div>
            )}
            <div class={`p-6 ${post.data.heroImage ? 'md:w-2/3' : 'w-full'}`}>
              <!-- Post Meta -->
              <div class="flex items-center text-sm text-gray-600 dark:text-gray-400 mb-3">
                <time datetime={post.data.pubDate.toISOString()}>
                  {post.data.pubDate.toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                  })}
                </time>
                <span class="mx-2">•</span>
                <span>By {post.data.author}</span>
                {post.data.featured && (
                  <>
                    <span class="mx-2">•</span>
                    <span class="inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200">
                      ⭐ Featured
                    </span>
                  </>
                )}
              </div>

              <!-- Post Title -->
              <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-3">
                <a 
                  href={`/blog/${post.slug}`} 
                  class="hover:text-blue-600 dark:hover:text-blue-400 transition-colors"
                >
                  {post.data.title}
                </a>
              </h2>

              <!-- Post Description -->
              <p class="text-gray-600 dark:text-gray-300 mb-4 line-clamp-3">
                {post.data.description}
              </p>

              <!-- Tags -->
              <div class="flex flex-wrap gap-2 mb-4">
                {post.data.tags.map((tag) => (
                  <span class="inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200">
                    #{tag}
                  </span>
                ))}
              </div>

              <!-- Read More Link -->
              <a 
                href={`/blog/${post.slug}`}
                class="inline-flex items-center text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 font-medium transition-colors"
              >
                Read More
                <svg class="ml-1 w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                </svg>
              </a>
            </div>
          </div>
        </article>
      ))}
    </div>

    <!-- No Results Message -->
    <div id="no-results" class="hidden text-center py-12">
      <svg class="mx-auto w-16 h-16 text-gray-400 mb-4" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
      </svg>
      <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">No posts found</h3>
      <p class="text-gray-600 dark:text-gray-400">Try adjusting your search or filter criteria.</p>
    </div>

    <!-- Pagination (placeholder for future implementation) -->
    <div class="mt-12 flex justify-center">
      <nav class="flex items-center space-x-2">
        <button class="px-3 py-2 text-sm font-medium text-gray-500 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 disabled:opacity-50" disabled>
          Previous
        </button>
        <span class="px-3 py-2 text-sm font-medium text-white bg-blue-600 border border-blue-600 rounded-md">
          1
        </span>
        <button class="px-3 py-2 text-sm font-medium text-gray-500 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 disabled:opacity-50" disabled>
          Next
        </button>
      </nav>
    </div>
  </main>
  
  <Footer />
</BaseLayout>

<script>
  // Search and filter functionality
  const searchInput = document.getElementById('search-input');
  const tagFilters = document.querySelectorAll('.tag-filter');
  const postItems = document.querySelectorAll('.post-item');
  const noResults = document.getElementById('no-results');
  const postsContainer = document.getElementById('posts-container');

  let currentTag = 'all';
  let currentSearch = '';

  function filterPosts() {
    let visibleCount = 0;

    postItems.forEach(post => {
      const postTags = post.dataset.tags.split(',');
      const postTitle = post.dataset.title;
      const postDescription = post.dataset.description;

      const matchesTag = currentTag === 'all' || postTags.includes(currentTag);
      const matchesSearch = currentSearch === '' || 
        postTitle.includes(currentSearch) || 
        postDescription.includes(currentSearch) ||
        postTags.some(tag => tag.includes(currentSearch));

      if (matchesTag && matchesSearch) {
        post.style.display = 'block';
        visibleCount++;
      } else {
        post.style.display = 'none';
      }
    });

    // Show/hide no results message
    if (visibleCount === 0) {
      noResults.classList.remove('hidden');
      postsContainer.classList.add('hidden');
    } else {
      noResults.classList.add('hidden');
      postsContainer.classList.remove('hidden');
    }
  }

  // Search functionality
  searchInput?.addEventListener('input', (e) => {
    currentSearch = e.target.value.toLowerCase();
    filterPosts();
  });

  // Tag filter functionality
  tagFilters.forEach(button => {
    button.addEventListener('click', () => {
      // Update active state
      tagFilters.forEach(btn => btn.classList.remove('active', 'bg-blue-600', 'text-white'));
      tagFilters.forEach(btn => btn.classList.add('bg-gray-200', 'dark:bg-gray-700', 'text-gray-700', 'dark:text-gray-300'));
      
      button.classList.add('active', 'bg-blue-600', 'text-white');
      button.classList.remove('bg-gray-200', 'dark:bg-gray-700', 'text-gray-700', 'dark:text-gray-300');

      currentTag = button.dataset.tag;
      filterPosts();
    });
  });
</script>

<style>
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
