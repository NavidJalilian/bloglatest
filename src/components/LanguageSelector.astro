---
const currentLang = Astro.currentLocale || 'en';
const currentPath = Astro.url.pathname;

const languages = [
  { code: 'en', name: 'English', flag: 'ðŸ‡ºðŸ‡¸' },
  { code: 'es', name: 'EspaÃ±ol', flag: 'ðŸ‡ªðŸ‡¸' },
  { code: 'fr', name: 'FranÃ§ais', flag: 'ðŸ‡«ðŸ‡·' },
];

// Function to get the path for a different language
function getLocalizedPath(langCode: string, path: string) {
  // Remove current language prefix if it exists
  const pathWithoutLang = path.replace(/^\/(en|es|fr)/, '') || '/';
  
  // Add new language prefix (except for default language 'en')
  if (langCode === 'en') {
    return pathWithoutLang;
  }
  return `/${langCode}${pathWithoutLang}`;
}
---

<div class="relative inline-block text-left">
  <button
    type="button"
    class="inline-flex items-center justify-center w-full px-3 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
    id="language-menu-button"
    aria-expanded="false"
    aria-haspopup="true"
  >
    <span class="mr-2">{languages.find(lang => lang.code === currentLang)?.flag}</span>
    <span class="hidden sm:inline">{languages.find(lang => lang.code === currentLang)?.name}</span>
    <span class="sm:hidden">{currentLang.toUpperCase()}</span>
    <svg class="w-4 h-4 ml-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
      <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
    </svg>
  </button>

  <div
    class="hidden absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-md bg-white dark:bg-gray-800 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none"
    id="language-menu"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="language-menu-button"
  >
    <div class="py-1" role="none">
      {languages.map((lang) => (
        <a
          href={getLocalizedPath(lang.code, currentPath)}
          class={`flex items-center px-4 py-2 text-sm transition-colors ${
            currentLang === lang.code
              ? 'bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300'
              : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
          }`}
          role="menuitem"
        >
          <span class="mr-3">{lang.flag}</span>
          <span>{lang.name}</span>
          {currentLang === lang.code && (
            <svg class="w-4 h-4 ml-auto" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
            </svg>
          )}
        </a>
      ))}
    </div>
  </div>
</div>

<script>
  const languageMenuButton = document.getElementById('language-menu-button');
  const languageMenu = document.getElementById('language-menu');

  languageMenuButton?.addEventListener('click', () => {
    languageMenu?.classList.toggle('hidden');
  });

  // Close menu when clicking outside
  document.addEventListener('click', (event) => {
    if (!languageMenuButton?.contains(event.target as Node) && !languageMenu?.contains(event.target as Node)) {
      languageMenu?.classList.add('hidden');
    }
  });
</script>
